<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CM33.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CM33.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Jul 26 01:14:00 2024
<BR><P>
<H3>Maximum Stack Usage =       1728 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_lv_disp_refr_task &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SecureFault_Handler</a><BR>
 <LI><a href="#[7]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SVC_Handler</a><BR>
 <LI><a href="#[8]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DebugMon_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[b]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UART0_Handler</a><BR>
 <LI><a href="#[c]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">ADC_Handler</a><BR>
 <LI><a href="#[d]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UART1_Handler</a><BR>
 <LI><a href="#[e]">DMACINTERR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DMACINTERR_Handler</a><BR>
 <LI><a href="#[f]">DMACINTTC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">DMACINTTC_Handler</a><BR>
 <LI><a href="#[10]">DMACINTR_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">DMACINTR_Handler</a><BR>
 <LI><a href="#[11]">PORT0_COMB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PORT0_COMB_Handler</a><BR>
 <LI><a href="#[12]">ADC1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_Handler</a><BR>
 <LI><a href="#[13]">TIMER0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">TIMER0_Handler</a><BR>
 <LI><a href="#[14]">TIMER1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">TIMER1_Handler</a><BR>
 <LI><a href="#[15]">DUALTIMER0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">DUALTIMER0_Handler</a><BR>
 <LI><a href="#[16]">DUALTIMER1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DUALTIMER1_Handler</a><BR>
 <LI><a href="#[17]">UARTOVF_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">UARTOVF_Handler</a><BR>
 <LI><a href="#[1b]">PORT0_0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">PORT0_0_Handler</a><BR>
 <LI><a href="#[1c]">PORT0_1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">PORT0_1_Handler</a><BR>
 <LI><a href="#[1d]">PORT0_2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">PORT0_2_Handler</a><BR>
 <LI><a href="#[1e]">PORT0_3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">PORT0_3_Handler</a><BR>
 <LI><a href="#[1f]">PORT0_4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">PORT0_4_Handler</a><BR>
 <LI><a href="#[20]">PORT0_5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">PORT0_5_Handler</a><BR>
 <LI><a href="#[21]">PORT0_6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">PORT0_6_Handler</a><BR>
 <LI><a href="#[22]">PORT0_7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">PORT0_7_Handler</a><BR>
 <LI><a href="#[23]">PORT0_8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">PORT0_8_Handler</a><BR>
 <LI><a href="#[24]">PORT0_9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">PORT0_9_Handler</a><BR>
 <LI><a href="#[25]">PORT0_10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">PORT0_10_Handler</a><BR>
 <LI><a href="#[26]">PORT0_11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">PORT0_11_Handler</a><BR>
 <LI><a href="#[27]">PORT0_12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">PORT0_12_Handler</a><BR>
 <LI><a href="#[28]">PORT0_13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">PORT0_13_Handler</a><BR>
 <LI><a href="#[29]">PORT0_14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">PORT0_14_Handler</a><BR>
 <LI><a href="#[2a]">PORT0_15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">PORT0_15_Handler</a><BR>
 <LI><a href="#[2b]">PORT0_16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">PORT0_16_Handler</a><BR>
 <LI><a href="#[2c]">PORT0_17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">PORT0_17_Handler</a><BR>
 <LI><a href="#[2d]">PORT0_18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">PORT0_18_Handler</a><BR>
 <LI><a href="#[2e]">PORT0_19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">PORT0_19_Handler</a><BR>
 <LI><a href="#[2f]">PORT0_20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">PORT0_20_Handler</a><BR>
 <LI><a href="#[30]">PORT0_21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">PORT0_21_Handler</a><BR>
 <LI><a href="#[31]">PORT0_22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">PORT0_22_Handler</a><BR>
 <LI><a href="#[32]">PORT0_23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32]">PORT0_23_Handler</a><BR>
 <LI><a href="#[33]">PORT0_24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">PORT0_24_Handler</a><BR>
 <LI><a href="#[34]">PORT0_25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">PORT0_25_Handler</a><BR>
 <LI><a href="#[35]">PORT0_26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">PORT0_26_Handler</a><BR>
 <LI><a href="#[36]">PORT0_27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">PORT0_27_Handler</a><BR>
 <LI><a href="#[37]">PORT0_28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">PORT0_28_Handler</a><BR>
 <LI><a href="#[38]">PORT0_29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">PORT0_29_Handler</a><BR>
 <LI><a href="#[39]">PORT0_30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">PORT0_30_Handler</a><BR>
 <LI><a href="#[3a]">PORT0_31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">PORT0_31_Handler</a><BR>
 <LI><a href="#[3b]">I2C_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">I2C_Handler</a><BR>
 <LI><a href="#[3c]">MPS2_SSP0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">MPS2_SSP0_Handler</a><BR>
 <LI><a href="#[3d]">MPS2_SSP1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">MPS2_SSP1_Handler</a><BR>
 <LI><a href="#[3e]">EXT0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">EXT0_Handler</a><BR>
 <LI><a href="#[3f]">EXT1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">EXT1_Handler</a><BR>
 <LI><a href="#[40]">EXT2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">EXT2_Handler</a><BR>
 <LI><a href="#[41]">EXT3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">EXT3_Handler</a><BR>
 <LI><a href="#[42]">EXT4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">EXT4_Handler</a><BR>
 <LI><a href="#[43]">EXT5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">EXT5_Handler</a><BR>
 <LI><a href="#[44]">EXT6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">EXT6_Handler</a><BR>
 <LI><a href="#[45]">EXT7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">EXT7_Handler</a><BR>
 <LI><a href="#[46]">EXT8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">EXT8_Handler</a><BR>
 <LI><a href="#[47]">EXT9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">EXT9_Handler</a><BR>
 <LI><a href="#[48]">EXT10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">EXT10_Handler</a><BR>
 <LI><a href="#[49]">EXT11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">EXT11_Handler</a><BR>
 <LI><a href="#[4a]">EXT12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">EXT12_Handler</a><BR>
 <LI><a href="#[18]">EXT13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">EXT13_Handler</a><BR>
 <LI><a href="#[19]">EXT14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">EXT14_Handler</a><BR>
 <LI><a href="#[1a]">EXT15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">EXT15_Handler</a><BR>
 <LI><a href="#[4b]">UART2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">UART2_Handler</a><BR>
 <LI><a href="#[19d]">lv_draw_rect</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b1]">lv_draw_label</a><BR>
 <LI><a href="#[1fe]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fe]">lv_refr_obj</a><BR>
 <LI><a href="#[1fb]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1fb]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[126]">_lv_obj_get_style_ptr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">update_style_cache</a><BR>
 <LI><a href="#[122]">update_style_cache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[124]">_lv_obj_get_style_opa</a><BR>
 <LI><a href="#[121]">_lv_obj_get_style_int</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">update_style_cache</a><BR>
 <LI><a href="#[1be]">lv_event_send_func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1be]">lv_event_send_func</a><BR>
 <LI><a href="#[1f6]">refresh_children_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f6]">refresh_children_position</a><BR>
 <LI><a href="#[179]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[179]">lv_indev_search_obj</a><BR>
 <LI><a href="#[188]">update_style_cache_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">update_style_cache_children</a><BR>
 <LI><a href="#[1f3]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f3]">refresh_children_style</a><BR>
 <LI><a href="#[14c]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14c]">apply_theme</a><BR>
 <LI><a href="#[1f5]">report_style_mod_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f5]">report_style_mod_core</a><BR>
 <LI><a href="#[1ed]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ed]">obj_del_core</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[c]">ADC_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[e]">DMACINTERR_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[10]">DMACINTR_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[f]">DMACINTTC_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[15]">DUALTIMER0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[16]">DUALTIMER1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3e]">EXT0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[48]">EXT10_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[49]">EXT11_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[4a]">EXT12_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[18]">EXT13_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[19]">EXT14_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1a]">EXT15_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3f]">EXT1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[40]">EXT2_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[41]">EXT3_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[42]">EXT4_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[43]">EXT5_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[44]">EXT6_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[45]">EXT7_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[46]">EXT8_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[47]">EXT9_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3b]">I2C_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3c]">MPS2_SSP0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3d]">MPS2_SSP1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1b]">PORT0_0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[25]">PORT0_10_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[26]">PORT0_11_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[27]">PORT0_12_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[28]">PORT0_13_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[29]">PORT0_14_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2a]">PORT0_15_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2b]">PORT0_16_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2c]">PORT0_17_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2d]">PORT0_18_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2e]">PORT0_19_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1c]">PORT0_1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[2f]">PORT0_20_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[30]">PORT0_21_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[31]">PORT0_22_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[32]">PORT0_23_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[33]">PORT0_24_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[34]">PORT0_25_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[35]">PORT0_26_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[36]">PORT0_27_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[37]">PORT0_28_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[38]">PORT0_29_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1d]">PORT0_2_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[39]">PORT0_30_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[3a]">PORT0_31_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1e]">PORT0_3_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[1f]">PORT0_4_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[20]">PORT0_5_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[21]">PORT0_6_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[22]">PORT0_7_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[23]">PORT0_8_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[24]">PORT0_9_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[11]">PORT0_COMB_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[54]">SCD_CMD_CALL</a> from scd.o(.text.SCD_CMD_CALL) referenced from scd.o(.text.SCD_Rev1Byte)
 <LI><a href="#[52]">SCD_CMD_CHG</a> from scd.o(.text.SCD_CMD_CHG) referenced from scd.o(.text.SCD_Rev1Byte)
 <LI><a href="#[51]">SCD_CMD_CONF</a> from scd.o(.text.SCD_CMD_CONF) referenced from scd.o(.text.SCD_Rev1Byte)
 <LI><a href="#[53]">SCD_CMD_DUMP</a> from scd.o(.text.SCD_CMD_DUMP) referenced from scd.o(.text.SCD_Rev1Byte)
 <LI><a href="#[50]">SCD_CMD_SET</a> from scd.o(.text.SCD_CMD_SET) referenced from scd.o(.text.SCD_Rev1Byte)
 <LI><a href="#[84]">SCO_DEBUG</a> from scd.o(.text.SCO_DEBUG) referenced from scd.o(.rodata.SCD_PROTOCOL_FCNS)
 <LI><a href="#[85]">SCO_DUMP</a> from scd.o(.text.SCO_DUMP) referenced from scd.o(.rodata.SCD_PROTOCOL_FCNS)
 <LI><a href="#[86]">SCO_PRINT</a> from scd.o(.text.SCO_PRINT) referenced from scd.o(.rodata.SCD_PROTOCOL_FCNS)
 <LI><a href="#[83]">SCO_VAR</a> from scd.o(.text.SCO_VAR) referenced from scd.o(.rodata.SCD_PROTOCOL_FCNS)
 <LI><a href="#[82]">SCO_get</a> from scd.o(.text.SCO_get) referenced from scd.o(.rodata.SCD_PROTOCOL_FCNS)
 <LI><a href="#[7]">SVC_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from nvic_it.o(.text.SysTick_Handler) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[4c]">SystemInit</a> from system_armcm33.o(.text.SystemInit) referenced from startup_armcm33.o(.text)
 <LI><a href="#[13]">TIMER0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[14]">TIMER1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[b]">UART0_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[d]">UART1_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[4b]">UART2_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[17]">UARTOVF_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_armcm33.o(.text) referenced from startup_armcm33.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_armcm33.o(.text)
 <LI><a href="#[68]">_lv_disp_refr_task</a> from lv_refr.o(.text._lv_disp_refr_task) referenced 2 times from lv_hal_disp.o(.text.lv_disp_drv_register)
 <LI><a href="#[71]">_lv_indev_read_task</a> from lv_indev.o(.text._lv_indev_read_task) referenced 2 times from lv_hal_indev.o(.text.lv_indev_drv_register)
 <LI><a href="#[6d]">_lv_ll_get_head</a> from lv_ll.o(.text._lv_ll_get_head) referenced 2 times from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[6d]">_lv_ll_get_head</a> from lv_ll.o(.text._lv_ll_get_head) referenced 2 times from lv_group.o(.text.lv_group_refocus)
 <LI><a href="#[6e]">_lv_ll_get_next</a> from lv_ll.o(.text._lv_ll_get_next) referenced 2 times from lv_group.o(.text.lv_group_focus_next)
 <LI><a href="#[6e]">_lv_ll_get_next</a> from lv_ll.o(.text._lv_ll_get_next) referenced 2 times from lv_group.o(.text.lv_group_refocus)
 <LI><a href="#[70]">_lv_ll_get_prev</a> from lv_ll.o(.text._lv_ll_get_prev) referenced 2 times from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[70]">_lv_ll_get_prev</a> from lv_ll.o(.text._lv_ll_get_prev) referenced 2 times from lv_group.o(.text.lv_group_refocus)
 <LI><a href="#[6f]">_lv_ll_get_tail</a> from lv_ll.o(.text._lv_ll_get_tail) referenced 2 times from lv_group.o(.text.lv_group_focus_prev)
 <LI><a href="#[6f]">_lv_ll_get_tail</a> from lv_ll.o(.text._lv_ll_get_tail) referenced 2 times from lv_group.o(.text.lv_group_refocus)
 <LI><a href="#[5c]">_out_buffer</a> from lv_printf.o(.text._out_buffer) referenced 2 times from lv_printf.o(.text._vsnprintf)
 <LI><a href="#[5d]">_out_null</a> from lv_printf.o(.text._out_null) referenced 2 times from lv_printf.o(.text._vsnprintf)
 <LI><a href="#[4f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[55]">anim_task</a> from lv_anim.o(.text.anim_task) referenced 2 times from lv_anim.o(.text._lv_anim_core_init)
 <LI><a href="#[57]">color_blend_true_color_additive</a> from lv_draw_blend.o(.text.color_blend_true_color_additive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_fill)
 <LI><a href="#[57]">color_blend_true_color_additive</a> from lv_draw_blend.o(.text.color_blend_true_color_additive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[56]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(.text.color_blend_true_color_subtractive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_fill)
 <LI><a href="#[56]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(.text.color_blend_true_color_subtractive) referenced 2 times from lv_draw_blend.o(.text._lv_blend_map)
 <LI><a href="#[7d]">disp_flush</a> from lv_port_disp.o(.text.disp_flush) referenced 2 times from lv_port_disp.o(.text.lv_port_disp_init)
 <LI><a href="#[4e]">fputc</a> from star_retarget.o(.text.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[61]">infoBar_task</a> from guiinit.o(.text.infoBar_task) referenced 2 times from guiinit.o(.text.guiInit)
 <LI><a href="#[6c]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_16_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[6b]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(.text.kern_pair_8_compare) referenced 2 times from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[87]">lv_anim_path_linear</a> from lv_anim.o(.text.lv_anim_path_linear) referenced from lv_anim.o(.rodata.lv_anim_path_def)
 <LI><a href="#[64]">lv_area_get_height</a> from lv_bar.o(.text.lv_area_get_height) referenced 2 times from lv_bar.o(.text.lv_bar_design)
 <LI><a href="#[65]">lv_area_get_width</a> from lv_bar.o(.text.lv_area_get_width) referenced 2 times from lv_bar.o(.text.lv_bar_design)
 <LI><a href="#[66]">lv_bar_anim</a> from lv_bar.o(.text.lv_bar_anim) referenced 2 times from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[67]">lv_bar_anim_ready</a> from lv_bar.o(.text.lv_bar_anim_ready) referenced 2 times from lv_bar.o(.text.lv_bar_set_value_with_anim)
 <LI><a href="#[63]">lv_bar_design</a> from lv_bar.o(.text.lv_bar_design) referenced 2 times from lv_bar.o(.text.lv_bar_create)
 <LI><a href="#[62]">lv_bar_signal</a> from lv_bar.o(.text.lv_bar_signal) referenced 2 times from lv_bar.o(.text.lv_bar_create)
 <LI><a href="#[69]">lv_draw_mask_line</a> from lv_draw_mask.o(.text.lv_draw_mask_line) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
 <LI><a href="#[6a]">lv_draw_mask_radius</a> from lv_draw_mask.o(.text.lv_draw_mask_radius) referenced 2 times from lv_draw_mask.o(.text.lv_draw_mask_radius_init)
 <LI><a href="#[8f]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt) referenced from lv_font_montserrat_28_compressed.o(.data.lv_font_montserrat_28_compressed)
 <LI><a href="#[8e]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt) referenced from lv_font_montserrat_28_compressed.o(.data.lv_font_montserrat_28_compressed)
 <LI><a href="#[5b]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_close) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[58]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_info) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[59]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_open) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[5a]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line) referenced 2 times from lv_img_decoder.o(.text._lv_img_decoder_init)
 <LI><a href="#[72]">lv_label_design</a> from lv_label.o(.text.lv_label_design) referenced 2 times from lv_label.o(.text.lv_label_create)
 <LI><a href="#[74]">lv_label_set_offset_x</a> from lv_label.o(.text.lv_label_set_offset_x) referenced 8 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[74]">lv_label_set_offset_x</a> from lv_label.o(.text.lv_label_set_offset_x) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[75]">lv_label_set_offset_y</a> from lv_label.o(.text.lv_label_set_offset_y) referenced 6 times from lv_label.o(.text.lv_label_refr_text)
 <LI><a href="#[75]">lv_label_set_offset_y</a> from lv_label.o(.text.lv_label_set_offset_y) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[73]">lv_label_signal</a> from lv_label.o(.text.lv_label_signal) referenced 2 times from lv_label.o(.text.lv_label_create)
 <LI><a href="#[79]">lv_obj_design</a> from lv_obj.o(.text.lv_obj_design) referenced 4 times from lv_obj.o(.text.lv_obj_create)
 <LI><a href="#[76]">lv_obj_set_x</a> from lv_obj.o(.text.lv_obj_set_x) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[77]">lv_obj_set_y</a> from lv_obj.o(.text.lv_obj_set_y) referenced 2 times from lv_label.o(.text.lv_label_set_long_mode)
 <LI><a href="#[78]">lv_obj_signal</a> from lv_obj.o(.text.lv_obj_signal) referenced 4 times from lv_obj.o(.text.lv_obj_create)
 <LI><a href="#[80]">lv_switch_design</a> from lv_switch.o(.text.lv_switch_design) referenced 2 times from lv_switch.o(.text.lv_switch_create)
 <LI><a href="#[7f]">lv_switch_signal</a> from lv_switch.o(.text.lv_switch_signal) referenced 2 times from lv_switch.o(.text.lv_switch_create)
 <LI><a href="#[88]">lv_txt_iso8859_1_get_byte_id</a> from lv_txt.o(.text.lv_txt_iso8859_1_get_byte_id) referenced from lv_txt.o(.data._lv_txt_encoded_get_byte_id)
 <LI><a href="#[89]">lv_txt_iso8859_1_get_char_id</a> from lv_txt.o(.text.lv_txt_iso8859_1_get_char_id) referenced from lv_txt.o(.data._lv_txt_encoded_get_char_id)
 <LI><a href="#[8d]">lv_txt_iso8859_1_get_length</a> from lv_txt.o(.text.lv_txt_iso8859_1_get_length) referenced from lv_txt.o(.data._lv_txt_get_encoded_length)
 <LI><a href="#[8a]">lv_txt_iso8859_1_next</a> from lv_txt.o(.text.lv_txt_iso8859_1_next) referenced from lv_txt.o(.data._lv_txt_encoded_next)
 <LI><a href="#[8b]">lv_txt_iso8859_1_prev</a> from lv_txt.o(.text.lv_txt_iso8859_1_prev) referenced from lv_txt.o(.data._lv_txt_encoded_prev)
 <LI><a href="#[8c]">lv_txt_iso8859_1_size</a> from lv_txt.o(.text.lv_txt_iso8859_1_size) referenced from lv_txt.o(.data._lv_txt_encoded_size)
 <LI><a href="#[5f]">switch1_event_handler</a> from guiinit.o(.text.switch1_event_handler) referenced 2 times from guiinit.o(.text.guiInit)
 <LI><a href="#[60]">switch2_event_handler</a> from guiinit.o(.text.switch2_event_handler) referenced 2 times from guiinit.o(.text.guiInit)
 <LI><a href="#[81]">theme_apply</a> from lv_theme_material.o(.text.theme_apply) referenced 2 times from lv_theme_material.o(.text.lv_theme_material_init)
 <LI><a href="#[7e]">touchpad_read</a> from lv_port_indev.o(.text.touchpad_read) referenced 2 times from lv_port_indev.o(.text.lv_port_indev_init)
 <LI><a href="#[7a]">trans_anim_cb</a> from lv_obj.o(.text.trans_anim_cb) referenced 2 times from lv_obj.o(.text.lv_obj_set_state)
 <LI><a href="#[7c]">trans_anim_ready_cb</a> from lv_obj.o(.text.trans_anim_ready_cb) referenced 2 times from lv_obj.o(.text.lv_obj_set_state)
 <LI><a href="#[7b]">trans_anim_start_cb</a> from lv_obj.o(.text.trans_anim_start_cb) referenced 2 times from lv_obj.o(.text.lv_obj_set_state)
 <LI><a href="#[5e]">unicode_list_compare</a> from lv_font_fmt_txt.o(.text.unicode_list_compare) referenced 4 times from lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[92]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[212]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[213]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[93]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[214]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[94]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[96]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[98]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[215]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[216]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[217]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[218]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[219]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[221]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[222]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[223]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[224]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[225]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[226]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[227]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[228]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[229]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[22a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[22b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[230]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[91]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[231]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[232]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry5.o(.ARM.Collect$$rtentry$$00000005))

<P><STRONG><a name="[9c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[233]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; guiInit &rArr; lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[235]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMACINTERR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTERR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTERR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMACINTTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTTC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTTC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMACINTR_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTR_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMACINTR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PORT0_COMB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_COMB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_COMB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DUALTIMER0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DUALTIMER1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUALTIMER1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UARTOVF_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>EXT13_IRQn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT13_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT13_IRQn
</UL>

<P><STRONG><a name="[a6]"></a>EXT14_IRQn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT14_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT14_IRQn
</UL>

<P><STRONG><a name="[a7]"></a>EXT15_IRQn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT15_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT15_IRQn
</UL>

<P><STRONG><a name="[1b]"></a>PORT0_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PORT0_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PORT0_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PORT0_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PORT0_4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PORT0_5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PORT0_6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PORT0_7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PORT0_8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PORT0_9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PORT0_10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PORT0_11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PORT0_12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PORT0_13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PORT0_14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORT0_15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PORT0_16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PORT0_17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PORT0_18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PORT0_19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PORT0_20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PORT0_21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PORT0_22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PORT0_23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>PORT0_24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>PORT0_25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PORT0_26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PORT0_27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PORT0_28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PORT0_29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PORT0_30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>PORT0_31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT0_31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>MPS2_SSP0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPS2_SSP0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPS2_SSP0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>MPS2_SSP1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPS2_SSP1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPS2_SSP1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>Spare51_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare51_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare51_Handler
</UL>

<P><STRONG><a name="[a9]"></a>Spare52_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare52_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare52_Handler
</UL>

<P><STRONG><a name="[aa]"></a>Spare53_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare53_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare53_Handler
</UL>

<P><STRONG><a name="[ab]"></a>Spare54_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare54_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare54_Handler
</UL>

<P><STRONG><a name="[ac]"></a>Spare55_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare55_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare55_Handler
</UL>

<P><STRONG><a name="[ad]"></a>Spare56_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare56_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare56_Handler
</UL>

<P><STRONG><a name="[ae]"></a>Spare57_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare57_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare57_Handler
</UL>

<P><STRONG><a name="[af]"></a>Spare58_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare58_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare58_Handler
</UL>

<P><STRONG><a name="[b0]"></a>Spare59_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare59_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare59_Handler
</UL>

<P><STRONG><a name="[b1]"></a>Spare60_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare60_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare60_Handler
</UL>

<P><STRONG><a name="[b2]"></a>Spare61_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare61_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare61_Handler
</UL>

<P><STRONG><a name="[b3]"></a>Spare62_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare62_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare62_Handler
</UL>

<P><STRONG><a name="[b4]"></a>Spare63_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare63_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spare63_Handler
</UL>

<P><STRONG><a name="[3e]"></a>EXT0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXT1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXT2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXT3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>EXT4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXT5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>EXT6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXT7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXT8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXT9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXT10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXT11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXT12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXT13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXT14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXT15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm33.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
</UL>

<P><STRONG><a name="[236]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[b7]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bf]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[95]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[237]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[1cb]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>

<P><STRONG><a name="[1ca]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_iso8859_1_get_length
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>

<P><STRONG><a name="[239]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[1c8]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv8m_maindsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
</UL>

<P><STRONG><a name="[23c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c0]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[99]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[c2]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[23f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>GPIO_DeInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, star_gpio.o(.text.GPIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[241]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>GPIO_OutModeDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, star_gpio.o(.text.GPIO_OutModeDisable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
</UL>

<P><STRONG><a name="[20a]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, star_gpio.o(.text.GPIO_PinRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>GPIO_ResetBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, star_gpio.o(.text.GPIO_ResetBit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch2_event_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch1_event_handler
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_SetBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, star_gpio.o(.text.GPIO_SetBit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch2_event_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch1_event_handler
</UL>

<P><STRONG><a name="[c4]"></a>GT911_Scan</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, touch_gt911_drv.o(.text.GT911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GT911_Scan &rArr; GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touchpad_read
</UL>

<P><STRONG><a name="[c7]"></a>GT911_init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, touch_gt911_drv.o(.text.GT911_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GT911_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi2c_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OutModeDisable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[c5]"></a>GT9XX_ReadData</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, touch_gt911_drv.o(.text.GT9XX_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[c6]"></a>GT9XX_WriteData</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, touch_gt911_drv.o(.text.GT9XX_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GT9XX_WriteData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_i2c
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_i2c
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>

<P><STRONG><a name="[d1]"></a>LCD_Init</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, lcd_9488_drv.o(.text.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[14d]"></a>LCD_Set_Window</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lcd_9488_drv.o(.text.LCD_Set_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Set_Window
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[d4]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, star_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[20e]"></a>SCD_Rev1Byte</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, scd.o(.text.SCD_Rev1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SCD_Rev1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nvic_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, system_armcm33.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm33.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>UART_DeInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, star_uart.o(.text.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20b]"></a>UART_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, star_uart.o(.text.UART_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>_lv_anim_core_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_anim.o(.text._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _lv_anim_core_init &rArr; lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1bd]"></a>_lv_area_align</STRONG> (Thumb, 862 bytes, Stack size 8 bytes, lv_area.o(.text._lv_area_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[de]"></a>_lv_area_intersect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[d9]"></a>_lv_area_is_in</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_area.o(.text._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[e4]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(.text._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[da]"></a>_lv_area_is_point_on</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, lv_area.o(.text._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>

<P><STRONG><a name="[e5]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_area.o(.text._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[db]"></a>_lv_blend_fill</STRONG> (Thumb, 2496 bytes, Stack size 112 bytes, lv_draw_blend.o(.text._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_blend_fill &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[e0]"></a>_lv_blend_map</STRONG> (Thumb, 2626 bytes, Stack size 112 bytes, lv_draw_blend.o(.text._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_blend_map &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[184]"></a>_lv_disp_pop_from_inv_buf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_hal_disp.o(.text._lv_disp_pop_from_inv_buf))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[68]"></a>_lv_disp_refr_task</STRONG> (Thumb, 1204 bytes, Stack size 72 bytes, lv_refr.o(.text._lv_disp_refr_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = _lv_disp_refr_task &rArr; lv_refr_area_part &rArr; lv_draw_img &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(.text.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[f1]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(.text._lv_font_clean_up_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_font_clean_up_fmt_txt &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[f3]"></a>_lv_group_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[f4]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, lv_img_buf.o(.text._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[f6]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 920 bytes, Stack size 64 bytes, lv_img_buf.o(.text._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[f9]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lv_img_buf.o(.text._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[fc]"></a>_lv_img_cache_open</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, lv_img_cache.o(.text._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[100]"></a>_lv_img_decoder_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_img_decoder.o(.text._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[102]"></a>_lv_indev_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_indev.o(.text._lv_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_indev_init &rArr; lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[104]"></a>_lv_indev_read</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_hal_indev.o(.text._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _lv_indev_read &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[71]"></a>_lv_indev_read_task</STRONG> (Thumb, 1948 bytes, Stack size 56 bytes, lv_indev.o(.text._lv_indev_read_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _lv_indev_read_task &rArr; indev_proc_press &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(.text.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[111]"></a>_lv_inv_area</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lv_refr.o(.text._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[113]"></a>_lv_ll_chg_list</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_chg_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_ll_chg_list &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
</UL>

<P><STRONG><a name="[6d]"></a>_lv_ll_get_head</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_group.o(.text.lv_group_refocus)
<LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[10d]"></a>_lv_ll_get_len</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[6e]"></a>_lv_ll_get_next</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_group.o(.text.lv_group_refocus)
<LI> lv_group.o(.text.lv_group_focus_next)
</UL>
<P><STRONG><a name="[70]"></a>_lv_ll_get_prev</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_group.o(.text.lv_group_refocus)
<LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[6f]"></a>_lv_ll_get_tail</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_group.o(.text.lv_group_refocus)
<LI> lv_group.o(.text.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[d6]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[115]"></a>_lv_ll_ins_head</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[117]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_ll.o(.text._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[118]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
</UL>

<P><STRONG><a name="[18d]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(.text._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
</UL>

<P><STRONG><a name="[119]"></a>_lv_ll_move_before</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lv_ll.o(.text._lv_ll_move_before))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>

<P><STRONG><a name="[114]"></a>_lv_ll_remove</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lv_ll.o(.text._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[14b]"></a>_lv_map</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_math.o(.text._lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
</UL>

<P><STRONG><a name="[f0]"></a>_lv_mem_buf_free_all</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_mem.o(.text._lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_mem_buf_free_all &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[ec]"></a>_lv_mem_buf_get</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lv_mem.o(.text._lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[ed]"></a>_lv_mem_buf_release</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lv_mem.o(.text._lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1c0]"></a>_lv_mem_get_size</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_mem.o(.text._lv_mem_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1d1]"></a>_lv_mem_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_mem.o(.text._lv_mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[e1]"></a>_lv_memcpy</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, lv_mem.o(.text._lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>

<P><STRONG><a name="[11b]"></a>_lv_memset</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_mem.o(.text._lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _lv_memset &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[ee]"></a>_lv_memset_00</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_mem.o(.text._lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
</UL>

<P><STRONG><a name="[11e]"></a>_lv_memset_ff</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lv_mem.o(.text._lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _lv_memset_ff &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[210]"></a>_lv_obj_disable_style_caching</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, lv_obj.o(.text._lv_obj_disable_style_caching))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_obj_disable_style_caching
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[11f]"></a>_lv_obj_get_style_color</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, lv_obj.o(.text._lv_obj_get_style_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = _lv_obj_get_style_color &rArr; _lv_style_list_get_color &rArr; _lv_style_get_color
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
</UL>

<P><STRONG><a name="[121]"></a>_lv_obj_get_style_int</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lv_obj.o(.text._lv_obj_get_style_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[124]"></a>_lv_obj_get_style_opa</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, lv_obj.o(.text._lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
</UL>

<P><STRONG><a name="[126]"></a>_lv_obj_get_style_ptr</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, lv_obj.o(.text._lv_obj_get_style_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = _lv_obj_get_style_ptr &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[129]"></a>_lv_obj_set_style_local_color</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_obj.o(.text._lv_obj_set_style_local_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _lv_obj_set_style_local_color &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_color
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[12d]"></a>_lv_obj_set_style_local_int</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_obj.o(.text._lv_obj_set_style_local_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _lv_obj_set_style_local_int &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_int
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[12f]"></a>_lv_obj_set_style_local_ptr</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_obj.o(.text._lv_obj_set_style_local_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = _lv_obj_set_style_local_ptr &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[dc]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1d4]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(.text._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1b9]"></a>_lv_sqrt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_math.o(.text._lv_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[134]"></a>_lv_style_get_color</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, lv_style.o(.text._lv_style_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _lv_style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_color
</UL>

<P><STRONG><a name="[135]"></a>_lv_style_get_int</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, lv_style.o(.text._lv_style_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _lv_style_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_int
</UL>

<P><STRONG><a name="[13d]"></a>_lv_style_get_mem_size</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_get_mem_size))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>

<P><STRONG><a name="[136]"></a>_lv_style_get_opa</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, lv_style.o(.text._lv_style_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _lv_style_get_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_opa
</UL>

<P><STRONG><a name="[137]"></a>_lv_style_get_ptr</STRONG> (Thumb, 180 bytes, Stack size 36 bytes, lv_style.o(.text._lv_style_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _lv_style_get_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_ptr
</UL>

<P><STRONG><a name="[131]"></a>_lv_style_list_add_style</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_style.o(.text._lv_style_list_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[133]"></a>_lv_style_list_add_trans_style</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_add_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _lv_style_list_add_trans_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[120]"></a>_lv_style_list_get_color</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_list_get_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_style_list_get_color &rArr; _lv_style_get_color
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_color
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>

<P><STRONG><a name="[123]"></a>_lv_style_list_get_int</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_list_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_style_list_get_int &rArr; _lv_style_get_int
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[125]"></a>_lv_style_list_get_opa</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_list_get_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_style_list_get_opa &rArr; _lv_style_get_opa
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
</UL>

<P><STRONG><a name="[127]"></a>_lv_style_list_get_ptr</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_list_get_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_style_list_get_ptr &rArr; _lv_style_get_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[1f9]"></a>_lv_style_list_get_transition_style</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_style.o(.text._lv_style_list_get_transition_style))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[132]"></a>_lv_style_list_remove_style</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_style_list_remove_style &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>

<P><STRONG><a name="[138]"></a>_lv_style_list_reset</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _lv_style_list_reset &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>

<P><STRONG><a name="[12a]"></a>_lv_style_list_set_local_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_set_local_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _lv_style_list_set_local_color &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_color
</UL>

<P><STRONG><a name="[12e]"></a>_lv_style_list_set_local_int</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_set_local_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _lv_style_list_set_local_int &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_int
</UL>

<P><STRONG><a name="[130]"></a>_lv_style_list_set_local_ptr</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style.o(.text._lv_style_list_set_local_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _lv_style_list_set_local_ptr &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_ptr
</UL>

<P><STRONG><a name="[13a]"></a>_lv_style_set_color</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_set_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_color &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_color
</UL>

<P><STRONG><a name="[13b]"></a>_lv_style_set_int</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_int &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_int
</UL>

<P><STRONG><a name="[13e]"></a>_lv_style_set_opa</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_set_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_opa &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[13c]"></a>_lv_style_set_ptr</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lv_style.o(.text._lv_style_set_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_style_set_ptr &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_ptr
</UL>

<P><STRONG><a name="[13f]"></a>_lv_task_core_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_task.o(.text._lv_task_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_task_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[f5]"></a>_lv_trigo_sin</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lv_math.o(.text._lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>

<P><STRONG><a name="[140]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 664 bytes, Stack size 104 bytes, lv_txt.o(.text._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[142]"></a>_lv_txt_get_size</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, lv_txt.o(.text._lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[143]"></a>_lv_txt_get_width</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, lv_txt.o(.text._lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_txt_get_width &rArr; lv_font_get_glyph_width
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[1dd]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_txt.o(.text._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[144]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lv_txt.o(.text._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[15e]"></a>_lv_utils_bsearch</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_utils.o(.text._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[c9]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(.text.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[4e]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, star_retarget.o(.text.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[161]"></a>guiInit</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, guiinit.o(.text.guiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 532 + Unknown Stack Size
<LI>Call Chain = guiInit &rArr; lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_event_cb
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_ptr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_color
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>guiLoopMain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, guiinit.o(.text.guiLoopMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = guiLoopMain &rArr; lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>infoBar_task</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, guiinit.o(.text.infoBar_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = infoBar_task &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiinit.o(.text.guiInit)
</UL>
<P><STRONG><a name="[189]"></a>lv_anim_del</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_anim.o(.text.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[18a]"></a>lv_anim_get</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[18b]"></a>lv_anim_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_anim.o(.text.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_anim_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[87]"></a>lv_anim_path_linear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_anim_path_linear &rArr; _lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.rodata.lv_anim_path_def)
</UL>
<P><STRONG><a name="[1df]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_anim.o(.text.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[18c]"></a>lv_anim_start</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lv_anim.o(.text.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_anim_start &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>

<P><STRONG><a name="[e6]"></a>lv_area_get_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[1fc]"></a>lv_area_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1ae]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(.text.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[18f]"></a>lv_bar_create</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = lv_bar_create &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
</UL>

<P><STRONG><a name="[19f]"></a>lv_bar_get_value</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_bar_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch2_event_handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch1_event_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_on
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_off
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
</UL>

<P><STRONG><a name="[1a0]"></a>lv_bar_set_range</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_bar_set_range &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
</UL>

<P><STRONG><a name="[197]"></a>lv_bar_set_value</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_on
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_off
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[208]"></a>lv_color_darken</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_color.o(.text.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_darken
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[df]"></a>lv_color_fill</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lv_color.o(.text.lv_color_fill))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[1a4]"></a>lv_disp_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lv_disp_buf_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[1a5]"></a>lv_disp_drv_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_hal_disp.o(.text.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_disp_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[1a6]"></a>lv_disp_drv_register</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lv_hal_disp.o(.text.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[14e]"></a>lv_disp_flush_ready</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[dd]"></a>lv_disp_get_buf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_buf))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[112]"></a>lv_disp_get_default</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1ec]"></a>lv_disp_get_dpi</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
</UL>

<P><STRONG><a name="[e8]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[183]"></a>lv_disp_get_inv_buf_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_inv_buf_size))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[178]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[17a]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[1a9]"></a>lv_disp_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[165]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1aa]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_disp.o(.text.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[207]"></a>lv_disp_get_size_category</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_size_category))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[e9]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[1fa]"></a>lv_disp_is_double_buf</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_is_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[e7]"></a>lv_disp_is_true_double_buf</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_hal_disp.o(.text.lv_disp_is_true_double_buf))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1ab]"></a>lv_draw_img</STRONG> (Thumb, 496 bytes, Stack size 88 bytes, lv_draw_img.o(.text.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520 + Unknown Stack Size
<LI>Call Chain = lv_draw_img &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1b0]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_draw_img.o(.text.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_draw_img_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1b1]"></a>lv_draw_label</STRONG> (Thumb, 2244 bytes, Stack size 336 bytes, lv_draw_label.o(.text.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288 + Unknown Stack Size
<LI>Call Chain = lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1b7]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_draw_label.o(.text.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_draw_label_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1b6]"></a>lv_draw_line</STRONG> (Thumb, 2228 bytes, Stack size 336 bytes, lv_draw_line.o(.text.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[1b2]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_draw_line.o(.text.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_draw_line_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[152]"></a>lv_draw_mask_add</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_add))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[153]"></a>lv_draw_mask_apply</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, lv_draw_mask.o(.text.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[150]"></a>lv_draw_mask_get_cnt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_get_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1b8]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lv_draw_mask.o(.text.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_line_points_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[151]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_mask_radius_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[1ee]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
</UL>

<P><STRONG><a name="[154]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_draw_mask.o(.text.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[19d]"></a>lv_draw_rect</STRONG> (Thumb, 7054 bytes, Stack size 288 bytes, lv_draw_rect.o(.text.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_full_border
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[19b]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_draw_rect.o(.text.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_draw_rect_dsc_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[10b]"></a>lv_event_send</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send_func (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
</UL>

<P><STRONG><a name="[1be]"></a>lv_event_send_func</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, lv_obj.o(.text.lv_event_send_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = lv_event_send_func &rArr;  lv_event_send_func (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[8f]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 826 bytes, Stack size 56 bytes, lv_font_fmt_txt.o(.text.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decompress_line
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_28_compressed.o(.data.lv_font_montserrat_28_compressed)
</UL>
<P><STRONG><a name="[1b4]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[1b3]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_font.o(.text.lv_font_get_glyph_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[8e]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_font_montserrat_28_compressed.o(.data.lv_font_montserrat_28_compressed)
</UL>
<P><STRONG><a name="[141]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lv_font.o(.text.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1c2]"></a>lv_group_add_obj</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
</UL>

<P><STRONG><a name="[10f]"></a>lv_group_focus_next</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[17f]"></a>lv_group_focus_obj</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_group_focus_obj &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[110]"></a>lv_group_focus_prev</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[10e]"></a>lv_group_get_editing</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[108]"></a>lv_group_get_focused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(.text.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_focused
</UL>

<P><STRONG><a name="[1c5]"></a>lv_group_remove_obj</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[109]"></a>lv_group_send_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; lv_event_send_func &rArr;  lv_event_send_func (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[10c]"></a>lv_group_set_editing</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
</UL>

<P><STRONG><a name="[f8]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[f7]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lv_img_buf.o(.text.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_buf_get_px_color
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[1c7]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_img_cache.o(.text.lv_img_cache_invalidate_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
</UL>

<P><STRONG><a name="[1c9]"></a>lv_img_cache_set_size</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_img_cache.o(.text.lv_img_cache_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = lv_img_cache_set_size &rArr; lv_img_cache_invalidate_src &rArr; lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1c6]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
</UL>

<P><STRONG><a name="[fb]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[fa]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[5b]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[58]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_img_decoder_built_in_info
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[59]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_img_decoder_built_in_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[5a]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, lv_img_decoder.o(.text.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_img_decoder_built_in_read_line
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(.text._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[fe]"></a>lv_img_decoder_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[101]"></a>lv_img_decoder_create</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_img_decoder.o(.text.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[1bc]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_get_info &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[ff]"></a>lv_img_decoder_open</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lv_img_decoder.o(.text.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[1af]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lv_img_decoder.o(.text.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[1bb]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(.text.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_match
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1cc]"></a>lv_indev_drv_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_hal_indev.o(.text.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_indev_drv_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[1cd]"></a>lv_indev_drv_register</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_hal_indev.o(.text.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lv_indev_drv_register &rArr; lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[1bf]"></a>lv_indev_get_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>

<P><STRONG><a name="[1ce]"></a>lv_indev_get_next</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_hal_indev.o(.text.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
</UL>

<P><STRONG><a name="[20f]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_indev.o(.text.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[103]"></a>lv_indev_reset</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, lv_indev.o(.text.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
</UL>

<P><STRONG><a name="[179]"></a>lv_indev_search_obj</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_indev.o(.text.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[162]"></a>lv_init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_set_act
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_task_core_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[16b]"></a>lv_label_create</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = lv_label_create &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_get_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1dc]"></a>lv_label_get_letter_on</STRONG> (Thumb, 628 bytes, Stack size 96 bytes, lv_label.o(.text.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lv_label_get_letter_on &rArr; get_txt_coords &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_width
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[1de]"></a>lv_label_refr_text</STRONG> (Thumb, 1268 bytes, Stack size 128 bytes, lv_label.o(.text.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[16d]"></a>lv_label_set_align</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_set_align &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1d5]"></a>lv_label_set_long_mode</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1d6]"></a>lv_label_set_recolor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_recolor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lv_label_set_recolor &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[1d7]"></a>lv_label_set_text</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[16e]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lv_label.o(.text.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoBar_task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1d8]"></a>lv_label_set_text_static</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[116]"></a>lv_mem_alloc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[1e3]"></a>lv_mem_defrag</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lv_mem.o(.text.lv_mem_defrag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_mem_defrag
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>

<P><STRONG><a name="[f2]"></a>lv_mem_free</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lv_mem.o(.text.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_defrag
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_free_all
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_set_size
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_remove_style
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>

<P><STRONG><a name="[11a]"></a>lv_mem_realloc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_mem.o(.text.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ent_trunc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[202]"></a>lv_obj_add_protect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_add_protect))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
</UL>

<P><STRONG><a name="[1e4]"></a>lv_obj_add_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_on
</UL>

<P><STRONG><a name="[16c]"></a>lv_obj_align</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_align &rArr; obj_align_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1e7]"></a>lv_obj_align_mid</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_obj.o(.text.lv_obj_align_mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>

<P><STRONG><a name="[192]"></a>lv_obj_allocate_ext_attr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_allocate_ext_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_allocate_ext_attr &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[1e9]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[16a]"></a>lv_obj_clean_style_list</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_clean_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = lv_obj_clean_style_list &rArr; trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[1eb]"></a>lv_obj_clear_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_off
</UL>

<P><STRONG><a name="[169]"></a>lv_obj_create</STRONG> (Thumb, 720 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lv_obj_create &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[198]"></a>lv_obj_del</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_del &rArr; obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[19e]"></a>lv_obj_get_base_dir</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_base_dir))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[1d0]"></a>lv_obj_get_click</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_click))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[160]"></a>lv_obj_get_coords</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>

<P><STRONG><a name="[191]"></a>lv_obj_get_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[1ea]"></a>lv_obj_get_disp</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_obj_get_disp
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[180]"></a>lv_obj_get_drag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_drag))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[174]"></a>lv_obj_get_drag_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_drag_dir))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[15b]"></a>lv_obj_get_drag_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_drag_parent))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
</UL>

<P><STRONG><a name="[173]"></a>lv_obj_get_drag_throw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_drag_throw))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[1a3]"></a>lv_obj_get_draw_rect_ext_pad_size</STRONG> (Thumb, 492 bytes, Stack size 64 bytes, lv_obj.o(.text.lv_obj_get_draw_rect_ext_pad_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_obj_get_draw_rect_ext_pad_size &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[18e]"></a>lv_obj_get_ext_attr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_ext_attr))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_recolor
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
</UL>

<P><STRONG><a name="[17c]"></a>lv_obj_get_focused_obj</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_focused_obj))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[185]"></a>lv_obj_get_gesture_parent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_gesture_parent))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[17d]"></a>lv_obj_get_group</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[182]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[157]"></a>lv_obj_get_hidden</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_hidden))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[15c]"></a>lv_obj_get_parent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
</UL>

<P><STRONG><a name="[190]"></a>lv_obj_get_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[156]"></a>lv_obj_get_state</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[211]"></a>lv_obj_get_style_list</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_get_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[181]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[175]"></a>lv_obj_get_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_x))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[176]"></a>lv_obj_get_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_get_y))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[1a2]"></a>lv_obj_handle_get_type_signal</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_handle_get_type_signal))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_signal
</UL>

<P><STRONG><a name="[1cf]"></a>lv_obj_hittest</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_hittest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_hittest &rArr; lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_point_on_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[1f0]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[1da]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[1f1]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
</UL>

<P><STRONG><a name="[19c]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_design
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
</UL>

<P><STRONG><a name="[158]"></a>lv_obj_invalidate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_align
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
</UL>

<P><STRONG><a name="[1f2]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>

<P><STRONG><a name="[1c3]"></a>lv_obj_is_focused</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_is_focused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_is_focused
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[1ef]"></a>lv_obj_is_point_on_coords</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_is_point_on_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_obj_is_point_on_coords &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hittest
</UL>

<P><STRONG><a name="[177]"></a>lv_obj_is_protected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_is_protected))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[17b]"></a>lv_obj_move_foreground</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_move_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_chg_list
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
</UL>

<P><STRONG><a name="[16f]"></a>lv_obj_realign</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_realign))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;infoBar_task
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[12c]"></a>lv_obj_refresh_style</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, lv_obj.o(.text.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_reset_style_list
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_ptr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_color
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[1f4]"></a>lv_obj_report_style_mod</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lv_obj.o(.text.lv_obj_report_style_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[1a7]"></a>lv_obj_reset_style_list</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_reset_style_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[199]"></a>lv_obj_set_click</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_click))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[195]"></a>lv_obj_set_design_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_design_cb))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[168]"></a>lv_obj_set_event_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_event_cb))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[1e0]"></a>lv_obj_set_height</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[10a]"></a>lv_obj_set_pos</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_mid_core
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_align_core
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[194]"></a>lv_obj_set_signal_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_signal_cb))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[167]"></a>lv_obj_set_size</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, lv_obj.o(.text.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[1e5]"></a>lv_obj_set_state</STRONG> (Thumb, 1466 bytes, Stack size 456 bytes, lv_obj.o(.text.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_snapshot
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_trans_style
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[76]"></a>lv_obj_set_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[77]"></a>lv_obj_set_y</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[163]"></a>lv_port_disp_init</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, lv_port_disp.o(.text.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_reset_style_list &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[164]"></a>lv_port_indev_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_port_indev.o(.text.lv_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lv_port_indev_init &rArr; GT911_init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[17e]"></a>lv_signal_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj.o(.text.lv_signal_send))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[1ff]"></a>lv_style_copy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_style.o(.text.lv_style_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_style_copy &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
</UL>

<P><STRONG><a name="[196]"></a>lv_style_list_copy</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lv_style.o(.text.lv_style_list_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = lv_style_list_copy &rArr; get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_alloc_local_style
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[193]"></a>lv_style_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(.text.lv_style_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = lv_style_list_init &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[200]"></a>lv_style_remove_prop</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lv_style.o(.text.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_mem_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[201]"></a>lv_style_reset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_style.o(.text.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_material_init
</UL>

<P><STRONG><a name="[166]"></a>lv_switch_create</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, lv_switch.o(.text.lv_switch_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = lv_switch_create &rArr; lv_bar_create &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_click
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_signal_cb
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_design_cb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_signal_cb
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_design_cb
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_ext_attr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_protect
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[203]"></a>lv_switch_off</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_switch.o(.text.lv_switch_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = lv_switch_off &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
</UL>

<P><STRONG><a name="[204]"></a>lv_switch_on</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_switch.o(.text.lv_switch_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = lv_switch_on &rArr; lv_obj_add_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_signal
</UL>

<P><STRONG><a name="[d7]"></a>lv_task_create</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lv_task.o(.text.lv_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_task_create &rArr; _lv_ll_ins_prev &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>

<P><STRONG><a name="[205]"></a>lv_task_del</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_task.o(.text.lv_task_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>

<P><STRONG><a name="[171]"></a>lv_task_handler</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, lv_task.o(.text.lv_task_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_task_handler &rArr; lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLoopMain
</UL>

<P><STRONG><a name="[1a8]"></a>lv_task_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_task.o(.text.lv_task_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_task_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[e3]"></a>lv_task_set_prio</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lv_task.o(.text.lv_task_set_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_move_before
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[19a]"></a>lv_theme_apply</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_theme.o(.text.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = lv_theme_apply &rArr; lv_obj_clean_style_list &rArr; trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_create
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_create
</UL>

<P><STRONG><a name="[128]"></a>lv_theme_get_font_normal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_theme.o(.text.lv_theme_get_font_normal))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
</UL>

<P><STRONG><a name="[1d2]"></a>lv_theme_material_init</STRONG> (Thumb, 5744 bytes, Stack size 64 bytes, lv_theme_material.o(.text.lv_theme_material_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_size_category
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_copy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[1d3]"></a>lv_theme_set_act</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme.o(.text.lv_theme_set_act))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[ef]"></a>lv_tick_elaps</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_elaps))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[e2]"></a>lv_tick_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_tick.o(.text.lv_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_exec
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_ready
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[145]"></a>lv_vsnprintf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_printf.o(.text.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[9f]"></a>main</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 540 + Unknown Stack Size
<LI>Call Chain = main &rArr; guiInit &rArr; lv_init &rArr; lv_theme_material_init &rArr; lv_obj_report_style_mod &rArr; report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scd_send1Byte
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_Rev1Byte
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scd_init_1
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiLoopMain
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;guiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d0]"></a>read_i2c</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, i2c_gpio.o(.text.read_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[20c]"></a>scd_init_1</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, scd_reg.o(.text.scd_init_1))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>scd_send1Byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, scd.o(.text.scd_send1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scd_send1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>start_i2c</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, i2c_gpio.o(.text.start_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[cf]"></a>stop_i2c</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, i2c_gpio.o(.text.stop_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stop_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[ca]"></a>swi2c_init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, i2c_gpio.o(.text.swi2c_init))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_init
</UL>

<P><STRONG><a name="[ce]"></a>write_i2c</STRONG> (Thumb, 326 bytes, Stack size 36 bytes, i2c_gpio.o(.text.write_i2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = write_i2c
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_WriteData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadData
</UL>

<P><STRONG><a name="[9b]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[242]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[243]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[54]"></a>SCD_CMD_CALL</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scd.o(.text.SCD_CMD_CALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCD_CMD_CALL &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.text.SCD_Rev1Byte)
</UL>
<P><STRONG><a name="[52]"></a>SCD_CMD_CHG</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, scd.o(.text.SCD_CMD_CHG))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCD_CMD_CHG &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.text.SCD_Rev1Byte)
</UL>
<P><STRONG><a name="[51]"></a>SCD_CMD_CONF</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scd.o(.text.SCD_CMD_CONF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCD_CMD_CONF &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.text.SCD_Rev1Byte)
</UL>
<P><STRONG><a name="[53]"></a>SCD_CMD_DUMP</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, scd.o(.text.SCD_CMD_DUMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCD_CMD_DUMP &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.text.SCD_Rev1Byte)
</UL>
<P><STRONG><a name="[50]"></a>SCD_CMD_SET</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, scd.o(.text.SCD_CMD_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SCD_CMD_SET &rArr; _cz_strtoxl
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cz_strtoxl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.text.SCD_Rev1Byte)
</UL>
<P><STRONG><a name="[84]"></a>SCO_DEBUG</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scd.o(.text.SCO_DEBUG))
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.rodata.SCD_PROTOCOL_FCNS)
</UL>
<P><STRONG><a name="[85]"></a>SCO_DUMP</STRONG> (Thumb, 460 bytes, Stack size 20 bytes, scd.o(.text.SCO_DUMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SCO_DUMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.rodata.SCD_PROTOCOL_FCNS)
</UL>
<P><STRONG><a name="[86]"></a>SCO_PRINT</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, scd.o(.text.SCO_PRINT))
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.rodata.SCD_PROTOCOL_FCNS)
</UL>
<P><STRONG><a name="[83]"></a>SCO_VAR</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, scd.o(.text.SCO_VAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCO_VAR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.rodata.SCD_PROTOCOL_FCNS)
</UL>
<P><STRONG><a name="[82]"></a>SCO_get</STRONG> (Thumb, 268 bytes, Stack size 0 bytes, scd.o(.text.SCO_get))
<BR>[Address Reference Count : 1]<UL><LI> scd.o(.rodata.SCD_PROTOCOL_FCNS)
</UL>
<P><STRONG><a name="[d2]"></a>_cz_strtoxl</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, scd.o(.text._cz_strtoxl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _cz_strtoxl
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_SET
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_DUMP
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CONF
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CHG
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCD_CMD_CALL
</UL>

<P><STRONG><a name="[155]"></a>focus_next_core</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lv_group.o(.text.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_hidden
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_to_foreground
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[1c4]"></a>lv_group_refocus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_group.o(.text.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_group_refocus &rArr; focus_next_core &rArr; obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[159]"></a>obj_to_foreground</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_group.o(.text.obj_to_foreground))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = obj_to_foreground &rArr; lv_obj_move_foreground &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[15a]"></a>get_dragged_obj</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_indev.o(.text.get_dragged_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dragged_obj
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_parent
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
</UL>

<P><STRONG><a name="[172]"></a>indev_drag_throw</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, lv_indev.o(.text.indev_drag_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[107]"></a>indev_proc_press</STRONG> (Thumb, 2008 bytes, Stack size 56 bytes, lv_indev.o(.text.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = indev_proc_press &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_signal_send
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_gesture_parent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_focused_obj
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_dir
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_inv_buf_size
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_pop_from_inv_buf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_foreground
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[106]"></a>indev_proc_release</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, lv_indev.o(.text.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = indev_proc_release &rArr; indev_drag_throw &rArr; lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_protected
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_drag_throw
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_drag_throw
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dragged_obj
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[105]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lv_indev.o(.text.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read_task
</UL>

<P><STRONG><a name="[186]"></a>invalidate_style_cache</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lv_obj.o(.text.invalidate_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[79]"></a>lv_obj_design</STRONG> (Thumb, 606 bytes, Stack size 128 bytes, lv_obj.o(.text.lv_obj_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.text.lv_obj_create)
</UL>
<P><STRONG><a name="[78]"></a>lv_obj_signal</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, lv_obj.o(.text.lv_obj_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = lv_obj_signal &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_realign
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.text.lv_obj_create)
</UL>
<P><STRONG><a name="[1e6]"></a>obj_align_core</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lv_obj.o(.text.obj_align_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = obj_align_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_align
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[1e8]"></a>obj_align_mid_core</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, lv_obj.o(.text.obj_align_mid_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_mid
</UL>

<P><STRONG><a name="[1ed]"></a>obj_del_core</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lv_obj.o(.text.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>

<P><STRONG><a name="[1f6]"></a>refresh_children_position</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lv_obj.o(.text.refresh_children_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = refresh_children_position &rArr;  refresh_children_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_position
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[1f3]"></a>refresh_children_style</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj.o(.text.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[1f5]"></a>report_style_mod_core</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, lv_obj.o(.text.report_style_mod_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + In Cycle
<LI>Call Chain = report_style_mod_core &rArr;  report_style_mod_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_mod_core
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_mod
</UL>

<P><STRONG><a name="[187]"></a>style_prop_is_cacheble</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, lv_obj.o(.text.style_prop_is_cacheble))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[1f7]"></a>style_snapshot</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, lv_obj.o(.text.style_snapshot))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = style_snapshot &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_disable_style_caching
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7a]"></a>trans_anim_cb</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, lv_obj.o(.text.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_ptr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_opa
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_int
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_set_color
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.text.lv_obj_set_state)
</UL>
<P><STRONG><a name="[7c]"></a>trans_anim_ready_cb</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_obj.o(.text.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = trans_anim_ready_cb &rArr; lv_style_remove_prop &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.text.lv_obj_set_state)
</UL>
<P><STRONG><a name="[7b]"></a>trans_anim_start_cb</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_obj.o(.text.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = trans_anim_start_cb &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_color
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.text.lv_obj_set_state)
</UL>
<P><STRONG><a name="[12b]"></a>trans_del</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lv_obj.o(.text.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trans_del &rArr; lv_anim_del &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_get_transition_style
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_ptr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_set_style_local_color
</UL>

<P><STRONG><a name="[122]"></a>update_style_cache</STRONG> (Thumb, 922 bytes, Stack size 32 bytes, lv_obj.o(.text.update_style_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_prop_is_cacheble
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>

<P><STRONG><a name="[188]"></a>update_style_cache_children</STRONG> (Thumb, 374 bytes, Stack size 64 bytes, lv_obj.o(.text.update_style_cache_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + In Cycle
<LI>Call Chain = update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_font_normal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_ptr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_style_cache_children
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_style_cache
</UL>

<P><STRONG><a name="[ea]"></a>lv_refr_area_part</STRONG> (Thumb, 314 bytes, Stack size 136 bytes, lv_refr.o(.text.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_img &rArr; show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_vdb_flush
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
</UL>

<P><STRONG><a name="[1fb]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_refr.o(.text.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_opa
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[1fe]"></a>lv_refr_obj</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, lv_refr.o(.text.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[1fd]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_refr.o(.text.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[eb]"></a>lv_refr_vdb_flush</STRONG> (Thumb, 956 bytes, Stack size 104 bytes, lv_refr.o(.text.lv_refr_vdb_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_refr_vdb_flush &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_true_double_buf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_double_buf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_task
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[139]"></a>get_alloc_local_style</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_style.o(.text.get_alloc_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = get_alloc_local_style &rArr; _lv_style_list_add_style &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_list_copy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_ptr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_int
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_set_local_color
</UL>

<P><STRONG><a name="[57]"></a>color_blend_true_color_additive</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, lv_draw_blend.o(.text.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = color_blend_true_color_additive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(.text._lv_blend_fill)
<LI> lv_draw_blend.o(.text._lv_blend_map)
</UL>
<P><STRONG><a name="[56]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, lv_draw_blend.o(.text.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = color_blend_true_color_subtractive
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(.text._lv_blend_fill)
<LI> lv_draw_blend.o(.text._lv_blend_map)
</UL>
<P><STRONG><a name="[1ad]"></a>lv_draw_map</STRONG> (Thumb, 1906 bytes, Stack size 256 bytes, lv_draw_img.o(.text.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = lv_draw_map &rArr; _lv_blend_map &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[1ac]"></a>show_error</STRONG> (Thumb, 68 bytes, Stack size 144 bytes, lv_draw_img.o(.text.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432 + Unknown Stack Size
<LI>Call Chain = show_error &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[1b5]"></a>hex_char_to_num</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, lv_draw_label.o(.text.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[69]"></a>lv_draw_mask_line</STRONG> (Thumb, 1204 bytes, Stack size 24 bytes, lv_draw_mask.o(.text.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_line &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[6a]"></a>lv_draw_mask_radius</STRONG> (Thumb, 1316 bytes, Stack size 72 bytes, lv_draw_mask.o(.text.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = lv_draw_mask_radius &rArr; _lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_sqrt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(.text.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[14f]"></a>draw_full_border</STRONG> (Thumb, 1380 bytes, Stack size 200 bytes, lv_draw_rect.o(.text.draw_full_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = draw_full_border &rArr; _lv_blend_fill &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_get_cnt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memset_ff
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_buf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[1ba]"></a>shadow_blur_corner</STRONG> (Thumb, 406 bytes, Stack size 72 bytes, lv_draw_rect.o(.text.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = shadow_blur_corner &rArr; _lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_release
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[fd]"></a>lv_img_cache_match</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_img_cache.o(.text.lv_img_cache_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_cache_match &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[1c1]"></a>decompress_line</STRONG> (Thumb, 760 bytes, Stack size 48 bytes, lv_font_fmt_txt.o(.text.decompress_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = decompress_line
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[15d]"></a>get_glyph_dsc_id</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(.text.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[6c]"></a>kern_pair_16_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[6b]"></a>kern_pair_8_compare</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[5e]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(.text.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(.text.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[d8]"></a>anim_mark_list_change</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_anim.o(.text.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_set_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[55]"></a>anim_task</STRONG> (Thumb, 422 bytes, Stack size 104 bytes, lv_anim.o(.text.anim_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = anim_task &rArr; anim_mark_list_change &rArr; lv_task_set_prio &rArr; _lv_ll_move_before &rArr; _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_map
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(.text._lv_anim_core_init)
</UL>
<P><STRONG><a name="[1e2]"></a>ent_trunc</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_mem.o(.text.ent_trunc))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[146]"></a>_ntoa_format</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, lv_printf.o(.text._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>

<P><STRONG><a name="[147]"></a>_ntoa_long</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, lv_printf.o(.text._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = _ntoa_long &rArr; _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[148]"></a>_ntoa_long_long</STRONG> (Thumb, 164 bytes, Stack size 112 bytes, lv_printf.o(.text._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[5c]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(.text._out_buffer))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[5d]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(.text._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(.text._vsnprintf)
</UL>
<P><STRONG><a name="[14a]"></a>_vsnprintf</STRONG> (Thumb, 1240 bytes, Stack size 96 bytes, lv_printf.o(.text._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _vsnprintf &rArr; _ntoa_long_long &rArr; _ntoa_format &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>

<P><STRONG><a name="[206]"></a>lv_task_exec</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_task.o(.text.lv_task_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_task_exec &rArr; lv_task_del &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_del
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_task_handler
</UL>

<P><STRONG><a name="[88]"></a>lv_txt_iso8859_1_get_byte_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_get_byte_id))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_byte_id)
</UL>
<P><STRONG><a name="[89]"></a>lv_txt_iso8859_1_get_char_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_get_char_id))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_get_char_id)
</UL>
<P><STRONG><a name="[8d]"></a>lv_txt_iso8859_1_get_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_iso8859_1_get_length &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_get_encoded_length)
</UL>
<P><STRONG><a name="[8a]"></a>lv_txt_iso8859_1_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_next))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_next)
</UL>
<P><STRONG><a name="[8b]"></a>lv_txt_iso8859_1_prev</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_prev))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_prev)
</UL>
<P><STRONG><a name="[8c]"></a>lv_txt_iso8859_1_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_txt.o(.text.lv_txt_iso8859_1_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data._lv_txt_encoded_size)
</UL>
<P><STRONG><a name="[14c]"></a>apply_theme</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_theme.o(.text.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[81]"></a>theme_apply</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, lv_theme_material.o(.text.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = theme_apply &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_list
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_list_add_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_material.o(.text.lv_theme_material_init)
</UL>
<P><STRONG><a name="[64]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_design)
</UL>
<P><STRONG><a name="[65]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_design)
</UL>
<P><STRONG><a name="[66]"></a>lv_bar_anim</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(.text.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[67]"></a>lv_bar_anim_ready</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_bar.o(.text.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[63]"></a>lv_bar_design</STRONG> (Thumb, 1380 bytes, Stack size 256 bytes, lv_bar.o(.text.lv_bar_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = lv_bar_design &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_create)
</UL>
<P><STRONG><a name="[1a1]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 118 bytes, Stack size 88 bytes, lv_bar.o(.text.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>

<P><STRONG><a name="[62]"></a>lv_bar_signal</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, lv_bar.o(.text.lv_bar_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = lv_bar_signal &rArr; lv_obj_get_draw_rect_ext_pad_size &rArr; _lv_obj_get_style_opa &rArr; update_style_cache &rArr;  _lv_obj_get_style_opa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.text.lv_bar_create)
</UL>
<P><STRONG><a name="[15f]"></a>get_txt_coords</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_label.o(.text.get_txt_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = get_txt_coords &rArr; _lv_obj_get_style_int &rArr;  update_style_cache (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
</UL>

<P><STRONG><a name="[72]"></a>lv_label_design</STRONG> (Thumb, 558 bytes, Stack size 184 bytes, lv_label.o(.text.lv_label_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = lv_label_design &rArr; lv_draw_label &rArr; lv_draw_line &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_size
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_txt_coords
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_create)
</UL>
<P><STRONG><a name="[1db]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_label.o(.text.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_dot_tmp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
</UL>

<P><STRONG><a name="[1e1]"></a>lv_label_revert_dots</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
</UL>

<P><STRONG><a name="[1d9]"></a>lv_label_set_dot_tmp</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_set_dot_tmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_label_set_dot_tmp &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_mem_defrag
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_memcpy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[74]"></a>lv_label_set_offset_x</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_offset_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
<LI> lv_label.o(.text.lv_label_refr_text)
</UL>
<P><STRONG><a name="[75]"></a>lv_label_set_offset_y</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_label.o(.text.lv_label_set_offset_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(.text.lv_label_set_long_mode)
<LI> lv_label.o(.text.lv_label_refr_text)
</UL>
<P><STRONG><a name="[73]"></a>lv_label_signal</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lv_label.o(.text.lv_label_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; lv_obj_set_size &rArr; lv_obj_realign &rArr; lv_obj_align_mid &rArr; obj_align_mid_core &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.text.lv_label_create)
</UL>
<P><STRONG><a name="[80]"></a>lv_switch_design</STRONG> (Thumb, 288 bytes, Stack size 136 bytes, lv_switch.o(.text.lv_switch_design))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = lv_switch_design &rArr; lv_draw_rect &rArr;  lv_draw_label (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_base_dir
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_switch_create)
</UL>
<P><STRONG><a name="[7f]"></a>lv_switch_signal</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, lv_switch.o(.text.lv_switch_signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 836 + Unknown Stack Size
<LI>Call Chain = lv_switch_signal &rArr; lv_switch_on &rArr; lv_obj_add_state &rArr; lv_obj_set_state &rArr; lv_obj_refresh_style &rArr; invalidate_style_cache &rArr; update_style_cache_children &rArr;  update_style_cache_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_handle_get_type_signal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_ext_attr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_draw_rect_ext_pad_size
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean_style_list
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_style_int
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_on
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_off
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.text.lv_switch_create)
</UL>
<P><STRONG><a name="[7d]"></a>disp_flush</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_port_disp.o(.text.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disp_flush &rArr; LCD_Set_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(.text.lv_port_disp_init)
</UL>
<P><STRONG><a name="[7e]"></a>touchpad_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_port_indev.o(.text.touchpad_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = touchpad_read &rArr; GT911_Scan &rArr; GT9XX_ReadData &rArr; write_i2c
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT911_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(.text.lv_port_indev_init)
</UL>
<P><STRONG><a name="[5f]"></a>switch1_event_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guiinit.o(.text.switch1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch1_event_handler &rArr; lv_bar_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiinit.o(.text.guiInit)
</UL>
<P><STRONG><a name="[60]"></a>switch2_event_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, guiinit.o(.text.switch2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = switch2_event_handler &rArr; lv_bar_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiinit.o(.text.guiInit)
</UL>
<P><STRONG><a name="[4f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
